echo "                                              Функции"

# В контексте Bash shell, термины «функция» и «процедура» могут использоваться взаимозаменяемо

# Функция в Bash может возвращать статус завершения (0 для успеха, любое другое число для ошибки) с помощью команды `return`, но фактически возвращаемое значение функции может быть получено через вывод на стандартный поток.



echo "                                         Определение функции"

# В Bash существует два синтаксиса для определения функции: с использованием ключевого слова `function` и без него. Между ними есть некоторые различия. Обычно предпочтение отдается стилю без `function`, так как он является более общепринятым


# 1. Без ключевого слова function - более универсален и совместим с POSIX, что делает его более предпочтительным, если вы хотите, чтобы ваш скрипт работал в разных оболочках, не только в Bash.
my_function() {
  # Тело функции
  echo "Hello, World!"
}


# 2. С ключевым словом function - считается более специфичным для Bash и не поддерживается в некоторых других шеллах.
function my_function {
  # Тело функции
  echo "Hello, World!"
}

# Но этот синтаксис имеет небольшие дополнительные возможности:
# a. Можно указывать переменные или функции с помощью дополнительных параметров (в скобках у имент ??)
# b. Иногда использование `function` может привести к более детальным сообщениям об ошибках, но это зависит от конкретной реализации Bash
# c. Только с этим синтаксисом имя функции может быть написано с пробелом:
function my function {
  echo "This is an invalid definition"
}



echo "                           Вызов функции. Возврат значения. Локальные переменные"

# Функции в Bash не могут возвращать значения как в других языках программирования. Однако, можно использовать `echo` для вывода значения и захватывать его в переменную.

# По умолчанию, переменные, объявленные в функции, являются глобальными. Чтобы определить локальную переменную функции используется ключевое слово `local`

divide() {
  echo "Params: $0 $1 $2" # Нумерованные параметры в теле функции, передаются при вызыве функции, а не просто скрипта, тк это локальная область видимости функции. Но параметр 0 все равно имя скрипта

  a=5       # переменные объявленные в теле функции являются глобальными (выходят в поле видимости всего скрипта)
  local b=3 # локальная переменная функции определяется через доп слово local

  if [ "$2" -eq 0 ]; then
    echo "ZerroError"
  else
    res=$(($1/$2))
    echo "Res is $res"
  fi
}

divide 10 2  # вызов функции, после названия параметры через пробел, круглые кобки не нужны
divide 10 0  # еще 1 вызов

divide $1 5  # передаем в функцию параметр скрипта

some_func "$@"  # так все параметры скрипта передадутся в функцию под теми же нормерами

# Далее запускаем в терминале
# $ bash script.sh
#=> Params: script.sh 10 2
#=> Res is 5
#=> Params: script.sh 10 0
#=> ZerroError

# присвоение в переменную результата функции
k=$(divide $a 5)
res=`divide $a 5`



echo "                                Вызов и определение функции внутри функции"

function ensure_integer() {
  if [[ "$1" =~ ^[+-]?[0-9]+$ ]]; then
    return 0
  else
    return 1
  fi
}
function even_or_odd() {
  local num=$1
  ensure_integer "$num" # вызываем 1 функцию в другой
}
even_or_odd $1


# Функция определенная внутри функции
function Solution {
  function main {
    echo "Hello World!"
  }
  main # вызываем
}
Solution



echo "                                           Обработка ошибок"

# Можно выполнять обработку ошибок с помощью кода возврата. В Bash, каждая команда возвращает код завершения, который можно проверить с помощью `$?`

my_function() {
  return 1  # Возвращаем код ошибки
}

my_function
if [ $? -ne 0 ]; then
  echo "Функция завершилась с ошибкой."
fi











#
