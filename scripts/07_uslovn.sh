echo "                                        Операторы сравнения"

# Операторы: ==, >, < итд - используется ТОЛЬКО для сравнения строк, чля чисел они работают некорректно

# Операторы сравнения для целых чисел(для Float в разделе math):
# ==   это   -eq        (хотя == так же работает)
# !=   это   -ne        (not equal to)
# >    это   -gt
# >=   это   -ge
# <    это   -lt
# <=   это   -le



echo "                                        Логические операторы"

# Сложное условие работает похоже на тернарный оператор
[[ $(($1 % $2)) -eq 0 && $(($1 % $3)) -eq 0 ]] && echo "true" || echo "false"



echo "                                        Условный оператор if"

read -p "Enter the number: " num

if [ "$num" -eq 5 ]; then
  # пробелы между скобками и условием обязятельны (можно больше 1 пробела для выравнивания)
  ls # исполняемый код с новой строки, тут например стандартная команда
elif [ "$num" -gt 10 ]; then                          # elif - оператор дополнительного условия
  echo "Your number greater then 10"
elif [ "$(expr $num % 2)" -eq 0 ]; then echo "Even"   # можно писать в строку если только одна строка
elif [ "$a" == "0" ] || [ "$(($k % 5))" -eq 0 ]; then # составное условие
  echo "jhgjhgh"
elif (( $1 % $2 -eq 0 && $1 % $3 -eq 0 )); then       # составное условие вариант 2 (какието ошибки с ||)
  printf 'true\n'
elif (( i%3==0 )) || (( i%5==0 ))                     # составное условие вариант 3 (мб корректнее чем выше)
  echo "jhgjh"
else                                                  # после else уже не нужно писать "; then"
  read -p "Enter your name: " name
  echo "$name"
fi                                                    # fi - закрывает условный оператор if


# Кавычки для переменных нужны, потому что, если переменная пуста, Bash обнаружит синтаксическую ошибку, тоесть будет так:
if [ = "valid" ]; then
fi


# (?? почемуто тут 2йные, в них можно не ставить кавычки для переменных ??)
if [[ "$text" =~ ^[+-]?[0-9]+$ ]]; then
  return 0
fi


# Проверка существование фаила
x=`find . -type f -name "$1"`
if [ "$1" = "" ]; then
  echo "Nothing to find"
elif [ "$x" = "" ]; then
  echo "Can't find $1"
else
  echo "Found $1"
fi
# Тоже что и выше ? -z - проверка на отсудствие параметра или пустую строку ?
[ -z $1 ] && echo "Nothing to find" || [ -e $1 ] && echo "Found $1" || echo "Can't find $1"



echo "                                        Тернарный оператор"

# Тернарный оператор
echo $(($1 ? 6 * $1 ** 2 + 2 : 1))



echo "                                       Условный оператор case"

case $1 in # далее пишем все условия-соответсвия с новой строки и за ними скобку
       1) echo "one";;               # равен числу
   [2-9]) echo "two-nine";;          # входит в диапазон
  "Soso") echo "privet Soso";;       # равен строке
     ab*) echo "wrong parametr";;    # строки начинающиеся на ab
       *) echo "wrong parametr";;    # * - что угодно - аналог else
esac # закрываем словом наоборот
# $ bash script.sh 1       #=> one
# $ bash script.sh 6       #=> two-nine
# $ bash script.sh Soso    #=> privet Soso
# $ bash script.sh aaa     #=> wrong parametr













#
