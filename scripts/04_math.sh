echo "                                 Математические операции с Integer"

# https://www.shell-tips.com/bash/math-arithmetic-calculation

a=1
b=2

# Оболочка Bash имеет арифметические операторы для выполнения математических вычислений. Они работают с методами let, declareи и арифметического расширения

# + - * / ** %    - математические операторы(деление целочисленное)

# Чтобы осуществить математическую операцию над переменными и или значениями, нужно:

# 1. Арифметическое расширение Bash - заключить математическую операцию в "$((операция))"
res=$((a+b))    # можно использовать переменные как без $
res=$(($a+$b))  # так и с $

# 2. Использование встроенных команд оболочки let или Declare
let a=5
let a+=1
let a++

# 3. При помощи команды expr
res=$(expr $a % 2)   # пробелы внутри мат выражения обязательны
c=`expr $a * $b`


# У 1го и 2го способа есть проблемы с большими числами, для них лучше использовать bc, хотя у него есть проблемы со скоростью



echo "                                   Математические операции с Float"

# Bash не поддерживает числа с плавающей запятой

# 1. Способ выполнения арифметических операций с плавающей запятой  — это объединение арифметического расширения вместе с printf, с использованием научной записи. Нужно применить заданный множитель в степени 10 к вашей математической операции внутри арифметического расширения, а затем использовать printf для отображения числа с плавающей запятой.

printf %.<precision>f "$((10**<multiplier> * 2/3))e-<multiplier>"
# <precision> - точность, число знаков после запятой, указанное целым числом. Если она будет выше чем сам множитель, то заполнится нулями
# <multiplier> - степень множителя, те начала умножаем на 10 в этой степени, а в конце делим

# Примеры:
printf %.3f "$((10**3 * 2/3))e-3"   #=> 0.666    # %.3f - тут 3 точность; 10**3 и e-3  - 3 и там и там одно и тоже число
printf %.1f "$((10**3 * 2/3))e-3"   #=> 0.7
printf %.5f "$((10**3 * 2/3))e-3"   #=> 0.66600  # Точность выше чем сам множитель - заполнилось нулями


# 2. Можно использовать команду/калькулятор 'bc' в неинтерактивном режиме, используя STDIN для отправки формулы, чтобы bc затем получил выходные данные STDOUT
# (! в калькуляторе bc степень записывается как "^")

echo "15.6+299.33*2.3/7.4" | bc  #=> 108.6
bc <<< "15.6+299.33*2.3/7.4"     #=> 108.6

# scale=n - параметр переводит целые во float и указывает число знаков после запятой
echo "(2/3)+(7/8)" | bc          #=> 0
echo "scale=2;(2/3)+(7/8)" | bc  #=> 1.53
echo "scale=4;(2/3)+(7/8)" | bc  #=> 1.5416
echo "scale=6;(2/3)+(7/8)" | bc  #=> 1.541666

# Флаг -l позволяет перевести во float и увидеть результат с максимальным числом знаков после запятой
echo "(2/3)+(7/8)" | bc -l       #=> 1.54166666666666666666
bc -l <<< "(2/3)+(7/8)"          #=> 1.54166666666666666666

# Округление
echo $(bc <<< "5.1-5.1%1+1") #=> 6.0       # ceil
echo $(bc <<< "5.1-5.1%1")   #=> 6.0       # floor

# Для вычисления логарифмов: применяется l функция, которая является натуральным логарифмом числа, которое вас интересует, затем разделите его на натуральный логарифм 10. Вызовите bc с -l опцией (чтобы включить математическую библиотеку):
echo "l(100)/l(10)" | bc -l #=> 2.00000000000000000000     # Логарифм, тут по основанию 10.

# Подстановка в переменную
p1=$(echo "$p0 + $p0 * $percent * 0.01 + $aug" | bc -l)
p1=$(bc <<< "$p0 + $p0 * $percent * 0.01 + $aug")

# Cравнение Float, например для условного оператора
# bc выведет 0 или 1, а (( )) интерпретирует их как false или true соответственно.
if (( $(echo "$result1 > $result2" | bc -l) )); then
fi
if [[ $(echo "$1 > 0 && $3 < $1 && $2 < 1 && $2 > 0" | bc -l) == 1 ]]; then  # тут 1 в конце синоним true
fi
# Альтернативный вариант:
if (( $(echo "$result1 $result2" | awk '{print ($1 > $2)}') )); then
fi



echo "                                       Системы исчисления"

# Перевод из десятичного в двоичное
echo "obase=2;$n" | bc














#
