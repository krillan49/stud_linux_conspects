echo "                              Типы пользователей и связанные команды и фаилы."

# Линукс имеет 2 типа пользователей/акаунтов:
# стандартный   - не может использовать sudo
# администратор - может использовать sudo

# Домашние директории всех пользователей хранятся в /home
# $ cd /home                - перейдем в директорию со всеми пользователями(работает как полный путь, тк начинается от корня)
# $ ls -l /home             - посмотрим домашние директории всех юзеров

# $ cat /etc/passwd         - посмотреть фаил содержащий всех пользователей в том числе и множество системных пользователей
#=> krillan:x:1000:1000:Krillan,,,:/home/krillan:/bin/bash
# x - обозначает что пароль хранится в другом фаиле
# 1000 - юзер айди
# 1000 - группа айди
# Krillan,,, - полное имя пользователя и комменты
# /home/krillan  - домашняя директория прльзователя
# /bin/bash  - шелл по умолчанию для запуска скриптов

# $ sudo cat /etc/shadow     - посмотреть фаил с зашифрованными паролями всех пользователей
#=> krillan:$y$ghfHF ... HJFhjdf:19854:0:99999:7:::
# $y$ghfHF ... HJFhjdf  - зашифрованный пароль(одинаковые пароли шифруются по разному)
# 19854  - число дней с 1 января 1970 до смены пароля
# 0 - через сколько дней можно поменять этот пароль
# 99999 - когда обязательно нужно поменять пароль(те срок действия пароля)

# $ su krillan               - сменить пользователя на krillan
# $ exit                     - вернуться на предыдущего пользователя

# Чтобы перейти в домашнюю директорию другого юзера может понадобиться активировать режим суперюзера, тк 'sudo cd' может не работать, а прав доступа для перехода может не быть

# (!! Добавить запись вида user@MyLinux, если при смене пользователя отображается только $ - Нужно ввести "bash" и станет запись нужного вида, можно посмотреть /etc/passwd, возможно для пользователя прописана оболочка /bin/sh, а должна быть /bin/bash)

# $ whoami                   - вывести логин текущего юзера

# $ id                       - вывести инфу о текущем пользователе, его айди, группы в которых состоит
# $ id goga                  - вывести ту же инфу о другом пользователе

# $ last                     - последние действия(входы) в систему и юзеры их проводившие

# $ who                      - кто сейчас залогинен в системе

# w - команда которая показывает инфу обо всех пользователях, что сейчас подключены к серверу/нашему компу, время подключения, кто сейчас в каком процессе итд
# $ w                        - показать инфу о пользователях



echo "                              Супер пользователь. Режим супер пользователя"

# Администратор в Linux может активировать супер пользователя(super user). Некоторые действия могут быть выполнены только от имени супер пользователя.

# sudo - (super user do) это ключевое слово нужно прописать перед кломандой для ее выполнения от имени супер пользователя.
# При создании фаилов или папок от имени супер пользователя, они будут иметь закрытые права доступа и пометку об этом на иконке фаила. Это означает, что их редактирование и удаление может быть выполнено только супер пользователем.
# При первом обращении к sudo после открытия терминала попросит пароль после нажатия Enter

# $ sudo touch file.txt                   - создание фаила с правами супер пользователя
# $ sudo nano file.txt                    - теперь для редактирования(или удаления) этого фаила тоже надо использовать sudo

# Можно перейти в режим супер пользователя при помощи команды смены пользователя su, чтобы не писать перед каждой командой sudo
# $ sudo su                      - переход в режим супер пользователя

# Для некоторых дистрибутивов например UbuntuMATE возможно придется отдельно задать пароль супер пользователя, чтобы, режим супер пользователя работал
# $ sudo passwd root             - спросит пароль, предложит создать новый пароль для перехода на su

# В режиме супер-пользователя в пути у нас прописывается /root перед именем компьютера и адрес начинается с корня /:
# krillan@krillan-itp-ubuntu:~/Документы$                        - обычный юзер ($)
# root@krillan-itp-ubuntu:/home/krillan/Документы#               - суперюзер    (#)

# # exit                         - возврат от суперпользователя к предыдущему пользователю
# # su krillan                   - (небезопасно) переход из режима администратора в режим пользователя

# Возвращаться от root к обычному непривилегированному пользователю через `su username` - небезопасная практика. Возвращаться из суперпользовательской оболочки надо командой exit. Тогда попадёшь в исходную оболочку, а не запустишь новую внутри старой. Иначе получится, что можно будет из обычного пользователя попасть в root тоже командой exit без пароля. И это будет видно другим пользователям на тачке по запущенным процессам.



echo "                               Пользователи. Создание, настройки, удаление."

# /etc/skel   - фаил-скелет для директорий нового юзера. Если создать в ней какието директории или фаилы, то они появятся в домашней директории каждго нового созданного после этого юзера

# useradd - команда создания пользователя. Создать нового пользователя можно только имея права суперюзера
# -m  - флаг для создания домашней директории для пользователя. Параметр -m нужен только если в /etc/login.defs не стоит создание домашней директории по умолчанию. В таком случае если создание для юзера домашней директории в папке home не нужно, то вместо -m нужно написать -M.
# $ sudo useradd -m vegita             - создаем нового пользователя vegita и домашнюю директорию для него

# passwd - команда создания/изменения пароля для пользователя
# $ sudo passwd vegita                 - создаем/меняем пароль для пользователя vegita

# userdel - команда для удаления пользователя
# -r  - флаг чтобы стереть еще и все фаилы, директории и группы этого юзера(если в них не состоят другие)
# $ sudo userdel -r vegita             - удалит пользователя vegita и все связанные с ним фаилы, директории и группы



echo "                        Группы. Создание и удаление групп, добавление и исключение юзера"

# $ cat /etc/group           - посмотреть фаил всех групп и всех пользователей что в них находятся
#=> sudo:x:27:krillan,soso
# sudo - имя группы(тут группа для активации суперюзера)
# krillan,soso - пользователи что состоят в группе

# grep dbz /etc/group        - посмотреть группу dbz и всех ее пользователей


# groupadd - команда создания группы
# $ sudo groupadd dbz                   - создадим новую группу dbz

# groupdel - команда удаления группы
# $ sudo groupdel dbz                   - удалим группу dbz


# adduser - команда добавляет пользователя в группу
# $ sudo adduser krillan vboxsf         - добавляем пользователя krillan в группу vboxsf

# usermod -aG  - Альтернативный способо добавть в группу.
# S sudo usermod -aG sudo krillan       - добавляем пользователя krillan в группу sudo (даем возможности суперпользователя)

# deluser - команда исключения пользователя из группы
# $ sudo deluser krillan dbz            - исключим юзера krillan из группы dbz



echo "                              Смена группы и владельца для фаила или директории"

# 1. chown (change ownership) - команда для изменения владельца и по желанию группы фаила(владелец:группа). Если меняем фаил с владельцем root или на владельца root то нужно выполнять команду от имени суперпользователя (sudo). Чтобы сменить пользователя или группу папки нужно использовать допонительный флаг "-R" (? у меня меняет и без этого ?)

# $ sudo chown root:krillan file.txt         - теперь у фаила file.txt владелец будет root, а группа krillan
# $ sudo chown -R krillan:krillan doc        - теперь у папки и владелец и группа krillan
# $ sudo chown krillan file.txt              - меняем/назначаем только владельца фаила


# 2. chgrp - команда меняет только группу для файла
# $ sudo chgrp dbz file.txt                  - меняем/назначаем группу dbz для фаила file.txt



echo "                                          Права доступа"

# Права доступа к фаилу или папке обозначаются 3мя цифрами (например 765), где:
# 1я цифра - (тут 7) права доступа для user/владельца фаила (того кто его создал) (u)
# 2я цифра - (тут 6) права доступа для group/группы                               (g)
# 3я цифра - (тут 5) права доступа для всех остальных пользователей               (o)
# Значения каждой из 3х цифр может быть от 0 до 7

# Каждая цифра в параметрах доступа означет 3-значное двоичное число:
# 000 = 0, 001 = 1, 010 = 2, 011 = 3, 100 = 4, 101 = 5, 110 = 6, 111 = 7.  (8 комбинайций)
# цифры 2ичного числа обозначают "rwx"(1я - "r", 2я - "w", 3я - "x"), сототв r - четверки, w - двойки, x - единицы
# r - (read) возможность прочитать/открыть фаил (для папки это смотреть что внутри)
# w - (write) возможность записать/изменить фаил (? для папки это изменять и удалять фаилы веутри ?)
# x - (exequte) возможность запустить/исполнить фаил (для папки это открыть/войти в папку, для фаилов нужно например для скриптов)
# Каждое из этих свойств может быть включено или отключено
# 1 в соотв положении значит включен режим, 0 - выключен.

# 765 == (111 110 101) == (rwx rw- r-x) Тоесть владелец имеет полный доступ, группа не может исполнять, а остальные записать

# Права доступа и владельца фаилов можно посмотреть в терминале при помощи команды:
# $ ls -l
# =>
# -rw-r--r-- 1 root    root       5 [дата и время] file.txt
# -rw-rw-r-- 1 krillan krillan   10 [дата и время] test.txt
# drwxrwxr-x 2 krillan krillan 4096 [дата и время] test
# drwxr-xr-x 2 root    root    4096 [дата и время] doc
# Где 1й символ(- фаил, d папка, l линк), далее права доступа для всех 3х типов(rw- r-- r--), цифра сколько внутри директорий(считая . и ..), далее владелец(root) и группа(root), далее вес фаила в байтах, дата и его название
# root - обозначает что папка или фаил созданы с правами суперпользователя



echo "                                Смена прав доступа фаила или директории"

# chmod (change modification) - команда, чтобы менять права доступа к фаилу или папке. Можно менять в цифровом или символьном формате. Если права у фаила с владельцем root или на владельца root то нужно выполнять команду от имени суперпользователя (sudo). Чтобы сменить права доступа папки нужно использовать допонительный флаг "-R"(? у меня меняет и без этого ?).

# 1. Цифровой формат(меняет вем 3м типам пользователей, так что придется смотреть что было, если хотим изменить чтото одно):
# $ sudo chmod 664 file.txt                  - меняем права доступа на 664 фаилу file.txt
# $ chmod -R 764 doc                         - пользователь или группа могут менять права без прав суперпользователя

# 2. Символьный формат(изменяем только то что указано в опциях остальное остается как было):
# $ sudo chmod u+x file.txt                  - добавляем владельцу(u) возможность исполнять(x)
# $ sudo chmod g-w file.txt                  - убираем у группы(g) возможность изменять(w)
# $ sudo chmod g+w,o-r file.txt              - несколько сразу
# $ sudo chmod ugo=r file.txt                - сразу всем 3м типам устаневливаем только чтение
# $ sudo chmod a=r file.txt                  - тоже что и выше (a - all) (? у меня посемуто не работает ?)
# $ sudo chmod +x myfile*                    - (? +x == a+x потом проверить) это добавит x на все файлы начинающиеся с имени myfile



echo "                                            Стикибит"

# По умолчанию если у пользователя есть доступ 'w' для папки, но для фаила внутри нее нет, то его все равно можно удалить, чтобы этого избежать нужно добавть доступ 't'(стики-бит) вместо 'x' для папки

# 1. Символьный формат:
# $ sudo chmod o+t someFold                  - добавляем для папки someFold остальным(o) вместо 'x' 't', теперь права на папку не позволят стереть фаил в ней, если к нему нет прав
# $ sudo chmod o-t someFold                  - вернется обратно 'x' вместо 't'

# 2. Цифровой формат - добавляем 4ю цифру(идет 1й) 0 - убрать стикибит, 1 - добавить:
# $ sudo chmod -R 1764 someFold              - добавляем
# $ sudo chmod -R 0764 someFold              - убираем















#
