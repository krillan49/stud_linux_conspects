echo "                                       Bash Shell скрипты"

# Bash Shell является усовершенствованной вариацией командного терминала

# Bash скрипт – файл, что содержит список команд для выполнения в терминале ОС Линукс. При помощи Bash скрипта вы можете выполнять управление вашей операционной системой.

# $ bash --version                 - посмотреть версию GNU Bash


# Для создания скрипта можно использовать любой текстовый редактор. Например nano

# Создаем фаил скрипта любым удобным способом. Название любое. Расширение - «.sh».

# В скриптах можно описывать любые команды, терминала. При запуске файла все команды будут выполнены друг за другом в терминале.

# Помимо стандартных команд можно создавать переменные, получать данные от пользователя, указывать передаваемые параметры и создавать условия, циклы, функции.

# $ bash script.sh                 - выполнить баш скрипт



echo "                                   Базовый синтаксис. Оператор echo"

# 1. В фаиле баш-скрипта в самом верху нужно обязательно прописать закомментированную строку, чтобы система поняла что это именно баш-скрипт и далее идут команды которые нужно выполнять:

#!bin/bash


# 2. Далее можем писать любые команды, каждую с новой строки и они будут выпонены по порядку, когда будет запущен скрипт. Например:
ls
mkdir folder
ls
touch folder/index.html
tree
echo "All done" # echo - оператор для вывода текстовых сообщений в терминал, принимает аргумент строки обязательно в 2йнфх кавычках, можно добавлять множество в любых местах скрипта


# 3. Далее сохраняем фаил скрипта, заходим в терминал и запускаем его при помощи команды bash

# $ bash script.sh                 - выполнить баш скрипт



echo "                                              Переменные"

#!bin/bash

# Чтобы создать переменную нужно указать для нее название(нельзя использовать спецсимволы), присваиваем в нее значение при помощи символа "=" (между символами не должно быть пробелов) и далее можно установить любое значение, целое, флоат, строку(обязательно в 2йных кавычках), а так же команду(обязательно в косых кавычках)
num=6                # переменная с целым числом
num2=45.5            # переменная с флоат числом
str="Vasya"          # переменная со строкой
com=`ls`             # переменная с командой
per="Inter is $num"  # интерполяция переменной в строку при помощи символа "$" и присвоение в другую переменную

# Чтобы вывести переменную на экран, можно воспользоваться интерполяцией в строку оператора echo,
echo "Per is $num"     #=> Per is 6
echo "Per is $com"     #=> выведет название фаила и все фаилы и паки в столбик
echo "$str is $num2"   #=> Vasya is 45.5

# Зарезервированные переменные:
# $0  - содержит название фаила в котором записана
echo "$0"              #=> script.sh



echo "                                       Операции над переменными"

#!bin/bash

a=1
b=2

# Чтобы осуществить операцию над переменными, например сложение, нужно заключить его в "$((операция))"
res=$((a+b))


echo "                                    Получение данных от пользователя"

# 1. Через нумерованные переменные

#!bin/bash

# Чтобы получить значение от передаваемых пользователем параметоров, нужно обратиться к нумерованной переменной например $1 или $2 или $7 итд, которая содержит 1й, 2й, 7й итд передаваемый пользователем параметр
a=$1                  # присваиваем 1й передаваемый параметр в переменную (хотя можно использовать и так)
b=$2
str=$3
res=$((a+b))
echo "$str is $res"

# Чтобы пользователю передать данные для параметров нужно ввести их через пробел при запуске скрипта, для строковых параметров не нужны кавычки, кроме одинарных если содержатся пробелы
# $ bash script.sh 10 15 Result        #=> Result is 25
# $ bash script.sh 20 15 Scuf          #=> Scuf is 35


# 2. Через команду read (те считывание от пользователя)

#!bin/bash

read -p "Enter the number:" num
# "Enter the number" - сообщение которое увидит пользователь в консоли
# num - переменная с тем что пользователь введет
echo "Your number is $num"

# Далее при запуске скрипта пользователь получит в терминале сообщение и возможность ввести параметр после него
# $ bash script.sh
#=> Enter the number:     # далее в этой же строке пользователь вводит параметр (например 6) нажимает энтер
#=> Your number is 6



echo "                                         Условные операторы"

#!bin/bash

read -p "Enter the number: " num

# Условный оператор if, далее квадратные скобки с пробелами вокруг, далее условия (?? переменные лучше выводить в кавычках так будут подставляться значения переменных ??)

# Операторы сравнения для условий: > это -gt,  < это -lt
# оператор > используется ТОЛЬКО для сравнения строк
# Не выходя за рамки конкретного задания с 5 по 8 строку должно быть
# if [ "$num" -eq 5 ]; then  # ну или можно оставить как есть == )) хотя это для операций сравнения строк, но как говорится "Вам - можно".
#         ls
# elif [ "$num" -gt 10 ]; then
#         echo "number is bigger than 10"

if [ "$num" == 5 ]; then  # далее исполняемый код с новой строки, тут например стандартную команду
  ls
elif [ "$num" > 5 ]; then # elif - дополнительное условие
  echo "Your number greater then 5"
else                      # после else уже не нужно писать "; then"
  read -p "Enter your name: " name
  echo "$name"
fi                        # fi - закрывает условный оператор if

# $ bash script.sh
#=> Enter the number: 6
#=> Your number greater then 5



echo "                                         Циклы: for и while"

# 1. Цикл for
for (( i=1; i<=10; i++ )); do  # пробелы вокруг скобок обязательны
  echo "El = $i"
done                           # ключевое слово закрытия цикла

# Альтернативный синтаксис for с использованием диапазона
for i in {2..5}; do   # тоесть присваиваем в переменную i значения от 2х до 5
  echo "El = $i"
done


# 1. Цикл while
i=0
while [ $i -lt 10 ]; do
  echo "El = $i"
  i=$(($i+1))
done



echo "                                               Функции"

# Функция создается без ключевых слов просто название()

divide() {   # ?? скобки в принципе не принмают параметры ??
  # Нумерованные параметры в теле функции, передаются при вызыве функции, а не просто скрипта, тк это локальная область видимости функции
  echo "Params: $1 $2"
  if [ "$2" == 0 ]; then
    echo "ZerroError"
  else
    res=$(($1/$2))
    echo "Res is $res"
  fi
}

divide 10 2  # вызов функции, после названия параметры через пробел, круглые кобки не нужны
divide 10 0  # еще 1 вызов

# Далее запускаем в терминале
# $ bash script.sh
#=> Params: 10 2
#=> Res is 5
#=> Params: 10 0
#=> ZerroError

















#
